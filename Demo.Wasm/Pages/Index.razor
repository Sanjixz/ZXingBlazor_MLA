@page "/"
@page "/en"

<h3>BarcodeReader</h3>

<h4>Barcode/QR code</h4>

<button class="btn btn-primary"
        type="button"
        @onclick="(() => ShowScanBarcode = !ShowScanBarcode)">
    Scan
</button>

Pdf417
<input type="checkbox" @bind-value="Pdf417" />

<input type="text" class="form-control" style="min-width: 100px;"
       @bind-value="BarCode"
       placeholder="BarCode" />

@if (Pdf417)
{
    <b>Pdf417:</b>
    <br />
    <pre>@BarCode</pre>
}

@if (ShowScanBarcode)
{

    <BarcodeReader ScanResult="((e) => { BarCode=e; ShowScanBarcode = !ShowScanBarcode; })"
                   ShowScanBarcode="ShowScanBarcode"
                   Close="(()=>ShowScanBarcode=!ShowScanBarcode)"
                   ScanBtnTitle="Scan"
                   ResetBtnTitle="Reset"
                   CloseBtnTitle="Close"
                   Pdf417="Pdf417"
                   SelectDeviceBtnTitle="Select Device" />

}

<button class="btn btn-secondary"
        type="button"
        @onclick="(() => ShowCodes = !ShowCodes)">
    Code
</button>

@if (ShowCodes)
{
<pre>
    <code>
        @@if (ShowScanBarcode)
        {

            &lt;BarcodeReader ScanResult="((e) => { BarCode=e; ShowScanBarcode = !ShowScanBarcode; })"
                           Close="(()=>ShowScanBarcode=!ShowScanBarcode)"
                           OnError="OnError" /&gt;
            @@code{
                bool ShowScanBarcode { get; set; } = false;

                public string? BarCode { get; set; }

                private string message;

                private Task OnError(string message)
                {
                    this.message = message;
                    StateHasChanged();
                    return Task.CompletedTask;
                }

            }
        }
    </code>
</pre>
}
<br />

<button class="btn btn-primary"
        type="button"
        @onclick="(() => ShowScanBarcodeCustom = !ShowScanBarcodeCustom)">
    Scan code [custom interface]
</button>

<input type="text" class="form-control" style="min-width: 100px;"
       @bind-value="BarCodeCustom"
       placeholder="条码" />
@if (ShowScanBarcodeCustom)
{
    <BarcodeReader ScanResult="((e) => { BarCodeCustom=e; ShowScanBarcodeCustom = !ShowScanBarcodeCustom; })"
                   Close="(()=>ShowScanBarcodeCustom=!ShowScanBarcodeCustom)"
                   OnError="OnError"
                   UseBuiltinDiv="false"
                   @ref="barcodeReaderCustom" />

    <div @ref="barcodeReaderCustom.barcodeScannerElement">
        <div style="width: 480px; max-width: 100%">
            <button class="btn btn-outline-success p-2 m-1 w-25" data-action="startButton">Scan</button>
            <button class="btn btn-outline-success p-2 m-1 w-25" data-action="resetButton">Reset</button>
            <button type="button" class="btn btn-outline-success p-2 m-1 w-25" data-action="closeButton">Close</button>

            <div data-action="sourceSelectPanel" style="display:none">
                <label for="sourceSelect">SelectDevice:</label><span class="text-dark" data-action="result"></span>
                <select data-action="sourceSelect" style="max-width:100%" class="form-control">
                </select>
            </div>
            <div>
                <video id="video" style="height:480px;width: 640px;border: 1px solid red"></video>
            </div>
        </div>
    </div>


}
<p>@message</p>
<br />
<br />
<br />
<br />
<div class="table-attr d-none d-md-block">

    <h4>Events</h4>

    <div class="table-container" _bl_79147904-531d-4e31-895f-47eb5e485a57="">

        <div class="table-toolbar">
        </div>

        <div class="table-wrapper">
            <table class="table is-single table-demo">
                <colgroup>
                    <col>
                    <col>
                    <col>
                </colgroup>
                <tbody>
                    <tr>
                        <td><div class="table-cell">ScanResult</div></td>
                        <td><div class="table-cell">Scan result callback method</div></td>
                        <td><div class="table-cell">EventCallback&lt;string&gt;</div></td>
                    </tr>
                    <tr>
                        <td><div class="table-cell">Close</div></td>
                        <td><div class="table-cell">Close scan code callback method</div></td>
                        <td><div class="table-cell">EventCallback</div></td>
                    </tr>
                    <tr>
                        <td><div class="table-cell">ScanBtnTitle</div></td>
                        <td><div class="table-cell">Scan button title</div></td>
                        <td><div class="table-cell">Parameter</div></td>
                    </tr>
                    <tr>
                        <td><div class="table-cell">ResetBtnTitle</div></td>
                        <td><div class="table-cell">Reset button title</div></td>
                        <td><div class="table-cell">Parameter</div></td>
                    </tr>
                    <tr>
                        <td><div class="table-cell">CloseBtnTitle</div></td>
                        <td><div class="table-cell">Close button title</div></td>
                        <td><div class="table-cell">Parameter</div></td>
                    </tr>
                    <tr>
                        <td><div class="table-cell">Pdf417</div></td>
                        <td><div class="table-cell">false</div></td>
                        <td><div class="table-cell">Parameter</div></td>
                    </tr>
                    <tr>
                        <td><div class="table-cell">SelectDeviceBtnTitle</div></td>
                        <td><div class="table-cell">Select device button title</div></td>
                        <td><div class="table-cell">Parameter</div></td>
                    </tr>
                    <tr>
                        <td><div class="table-cell">OnError</div></td>
                        <td><div class="table-cell">Error callback method</div></td>
                        <td><div class="table-cell">Func&lt;string, Task&gt;</div></td>
                    </tr>
                    <tr>
                        <td><div class="table-cell">UseBuiltinDiv</div></td>
                        <td><div class="table-cell">Use builtin interface,defallt True</div></td>
                        <td><div class="table-cell">bool</div></td>
                    </tr>
                </tbody>
                <thead>
                    <tr>
                        <th><div class="table-cell"><span class="table-text">Parameter</span></div></th>
                        <th><div class="table-cell"><span class="table-text">Description</span></div></th>
                        <th><div class="table-cell"><span class="table-text">Type</span></div></th>
                    </tr>
                </thead>
            </table>
        </div>

        <div class="table-filter">
        </div>

    </div>
</div>

<h6 style="color:lightskyblue;">@ver</h6>
<h6 style="color:lightskyblue;">@build</h6>

@code{

    /// <summary>
    /// Display the scan code interface
    /// </summary>
    bool ShowScanBarcode { get; set; } = false;

    /// <summary>
    /// BarCode
    /// </summary>
    public string? BarCode { get; set; }

    public bool Pdf417 { get; set; }

    private string message;

    private Task OnError(string message)
    {
        this.message = message;
        StateHasChanged();
        return Task.CompletedTask;
    }

    bool ShowCodes;

    #region Custom

    /// <summary>
    /// Display the Custom scan code interface
    /// </summary>
    bool ShowScanBarcodeCustom { get; set; } = false;

    /// <summary>
    /// BarCodeCustom
    /// </summary>
    public string? BarCodeCustom { get; set; }

    BarcodeReader barcodeReaderCustom;

    #endregion


    string? ver { get; set; }
    string? build { get; set; }


    Version? version { get; set; } = System.Reflection.Assembly.GetExecutingAssembly().GetName().Version;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ver = $"Ver {version?.Major}.{version?.Minor}.{version?.Build}";
        build = "Build:" + File.GetLastWriteTime(Path.Combine(Directory.GetCurrentDirectory(), "Demo.Wasm.dll")).ToLocalTime().ToString("yyyy-MM-dd HH:mm");

    }
}
